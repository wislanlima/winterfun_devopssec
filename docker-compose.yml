version: "3.8"
services:
  db:
    container_name: postgres
    build:
      context: ./_dockerfiles/postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOSTNAME: localhost:5432
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    networks:
      - winterfun_network

  redis:
    container_name: redis
    build:
      context: ./_dockerfiles/redis
    expose:
      - "6379"
    ports:
      - "6379:6379"
    networks:
      - winterfun_network

  api:
    build:
        context: .
        dockerfile: ./_dockerfiles/local/django/Dockerfile
    command: /start
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - "8080"
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - winterfun_network

  telegraf:
    # later versions of telegraf cannot be run as root.
    # see: https://www.influxdata.com/blog/docker-run-telegraf-as-non-root/
    container_name: telegraf
    user: root
    restart: always
    build:
      context: ./_dockerfiles/telegraf
    environment:
      - HOSTNAME= telegraf-dev
      - DOCKER_INFLUXDB_INIT_BUCKET=TELEGRAF-DEV
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - INFLUXDB_HOST=${INFLUXDB_HOST}
    volumes:
      # Mount for telegraf configuration
      - ./_dockerfiles/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - winterfun_network


  filebeat:
    container_name: filebeat
    restart: always
    user: root
    build:
      context: ./_dockerfiles/filebeat
    volumes:
      - ./_dockerfiles/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - KIBANA_HOST=${KIBANA_HOST}
      - ELASTIC_INDEX=filebeat-dev-server
    command: [ "--strict.perms=false" ]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    stdin_open: true
    tty: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "50"
    networks:
      - winterfun_network


  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    depends_on:
      - db
    ports:
      - "5051:80"
    networks:
      - winterfun_network


  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - winterfun_network
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - winterfun_network

networks:
    winterfun_network:
        driver: bridge
volumes:
    postgres_db_volume:
        driver: local
    static_volume:
    media_volume:
    filebeat: